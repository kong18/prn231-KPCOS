// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace KPCOS.Data.Models;

public partial class FA24_SE1717_PRN231_G4_KPCOSContext : DbContext
{
    public FA24_SE1717_PRN231_G4_KPCOSContext()
    {
    }

    public FA24_SE1717_PRN231_G4_KPCOSContext(DbContextOptions<FA24_SE1717_PRN231_G4_KPCOSContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Consultation> Consultations { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Design> Designs { get; set; }

    public virtual DbSet<DesignConcept> DesignConcepts { get; set; }

    public virtual DbSet<DesignTemplate> DesignTemplates { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<Feedback> Feedbacks { get; set; }

    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<Material> Materials { get; set; }

    public virtual DbSet<Package> Packages { get; set; }

    public virtual DbSet<PaymentPolicy> PaymentPolicies { get; set; }

    public virtual DbSet<Project> Projects { get; set; }

    public virtual DbSet<Quotation> Quotations { get; set; }

    public virtual DbSet<User> Users { get; set; }

    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-IGAN944;Initial Catalog=FA24_SE1717_PRN231_G4_KPCOS;User ID=sa;Password=12345;Encrypt=False");
    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"));

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Consultation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Consulta__3213E83F754B757A");

            entity.ToTable("Consultation");

            entity.HasIndex(e => e.Id, "UQ__Consulta__3213E83EB5A65238").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.AdjustedDesign).HasColumnType("ntext");
            entity.Property(e => e.AdjustedSpecification).HasColumnType("ntext");
            entity.Property(e => e.DesignId)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("design_id");
            entity.Property(e => e.Note).HasColumnType("ntext");

            entity.HasOne(d => d.Design).WithMany(p => p.Consultations)
                .HasForeignKey(d => d.DesignId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Consultation_Design");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Customer__3213E83F4E567AF3");

            entity.ToTable("Customer");

            entity.HasIndex(e => e.Id, "UQ__Customer__3213E83E765A7482").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.LoyaltyPoint).HasColumnName("loyalty_point");
            entity.Property(e => e.MembershipStatus)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("membership_status");
            entity.Property(e => e.PackageId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("package_id");
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("user_id");

            entity.HasOne(d => d.Package).WithMany(p => p.Customers)
                .HasForeignKey(d => d.PackageId)
                .HasConstraintName("FK_Customer_Package");

            entity.HasOne(d => d.User).WithMany(p => p.Customers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Customer_User");
        });

        modelBuilder.Entity<Design>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Design__3213E83FCF49CFE1");

            entity.ToTable("Design");

            entity.HasIndex(e => e.Id, "UQ__Design__3213E83E6E1191AB").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Budget).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.ConsultantBy)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("consultant_by");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.CustomerId)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CustomerID");
            entity.Property(e => e.Depth)
                .HasDefaultValue(0.6m)
                .HasColumnType("decimal(18, 0)");
            entity.Property(e => e.DesignType)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.FiltrationSystem).HasMaxLength(1);
            entity.Property(e => e.KoiCountRange)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.KoiType)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.Location)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("Outdoor");
            entity.Property(e => e.MinLength)
                .HasDefaultValue(2m)
                .HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinWidth)
                .HasDefaultValue(0.8m)
                .HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Note)
                .HasColumnType("ntext")
                .HasColumnName("note");
            entity.Property(e => e.Shape)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("Rectangular");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("Not yet responded");
            entity.Property(e => e.TemplateId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TemplateID");
            entity.Property(e => e.UpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("update_date");
            entity.Property(e => e.WaterLevel)
                .HasDefaultValue(0.4m)
                .HasColumnType("decimal(18, 0)");
            entity.Property(e => e.WaterQuality).HasMaxLength(1);

            entity.HasOne(d => d.Customer).WithMany(p => p.Designs)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Design_Customer");

            entity.HasOne(d => d.Template).WithMany(p => p.Designs)
                .HasForeignKey(d => d.TemplateId)
                .HasConstraintName("FK_Design_Template");
        });

        modelBuilder.Entity<DesignConcept>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DesignCo__3213E83F211F1761");

            entity.ToTable("DesignConcept");

            entity.HasIndex(e => e.Id, "UQ__DesignCo__3213E83E4D475763").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("description");
            entity.Property(e => e.Image)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("image");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("name");
            entity.Property(e => e.ProjectId)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("project_id");

            entity.HasOne(d => d.Project).WithMany(p => p.DesignConcepts)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DesignConcept_Project");
        });

        modelBuilder.Entity<DesignTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DesignTe__3213E83F1FF79D86");

            entity.ToTable("DesignTemplate");

            entity.HasIndex(e => e.Id, "UQ__DesignTe__3213E83EF8A678FA").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.DefaultLocation)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("default_location");
            entity.Property(e => e.DefaultShape)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("default_shape");
            entity.Property(e => e.DefaultSize)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("default_size");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasColumnType("ntext")
                .HasColumnName("description");
            entity.Property(e => e.Image)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("image");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("name");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Employee__3213E83F38C716A0");

            entity.ToTable("Employee");

            entity.HasIndex(e => e.Id, "UQ__Employee__3213E83ED37E00F2").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Salary)
                .HasDefaultValue(1000m)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("salary");
            entity.Property(e => e.SupervisorId)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("supervisor_id");
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("user_id");

            entity.HasOne(d => d.Supervisor).WithMany(p => p.InverseSupervisor)
                .HasForeignKey(d => d.SupervisorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Employee_Supervisor");

            entity.HasOne(d => d.User).WithMany(p => p.Employees)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Employee_User");
        });

        modelBuilder.Entity<Feedback>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Feedback__3213E83F73EAE922");

            entity.ToTable("Feedback");

            entity.HasIndex(e => e.Id, "UQ__Feedback__3213E83EBB3BF847").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Content)
                .IsRequired()
                .HasColumnType("ntext")
                .HasColumnName("content");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.CustomerId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("customer_id");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.ProjectId)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("project_id");
            entity.Property(e => e.Rating)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("rating");
            entity.Property(e => e.UpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("update_date");

            entity.HasOne(d => d.Customer).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_Feedback_Customer");

            entity.HasOne(d => d.Project).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Feedback_Project");
        });

        modelBuilder.Entity<Invoice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Invoice__3213E83FE14C54A4");

            entity.ToTable("Invoice");

            entity.HasIndex(e => e.Id, "UQ__Invoice__3213E83E992CD78C").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.DiscountApllied)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("discount_apllied");
            entity.Property(e => e.PaymentDate)
                .HasColumnType("datetime")
                .HasColumnName("payment_date");
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("payment_method");
            entity.Property(e => e.ProjectId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("project_id");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.TaxAmout)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("tax_amout");
            entity.Property(e => e.TotalAmout)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("total_amout");

            entity.HasOne(d => d.Project).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.ProjectId)
                .HasConstraintName("FK_Invoice_Project");
        });

        modelBuilder.Entity<Material>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Material__3213E83F6972D347");

            entity.ToTable("Material");

            entity.HasIndex(e => e.Id, "UQ__Material__3213E83EE2214F4A").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("name");
            entity.Property(e => e.ProjectId)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("project_id");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("type");
            entity.Property(e => e.Unit)
                .IsRequired()
                .HasMaxLength(1);

            entity.HasOne(d => d.Project).WithMany(p => p.Materials)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Material_Project");
        });

        modelBuilder.Entity<Package>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Package__3213E83F7EBE3BD1");

            entity.ToTable("Package");

            entity.HasIndex(e => e.Id, "UQ__Package__3213E83E1652E9BD").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("description");
            entity.Property(e => e.DiscountPercentage).HasColumnName("discount_percentage");
            entity.Property(e => e.Duration)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("duration");
            entity.Property(e => e.FeatureInclude)
                .IsRequired()
                .HasColumnType("ntext")
                .HasColumnName("feature_include");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("name");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("price");
            entity.Property(e => e.UpdateAt)
                .HasColumnType("datetime")
                .HasColumnName("update_at");
        });

        modelBuilder.Entity<PaymentPolicy>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PaymentP__3213E83F8C8BD1FE");

            entity.ToTable("PaymentPolicy");

            entity.HasIndex(e => e.Id, "UQ__PaymentP__3213E83EFC0192F5").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("name");
            entity.Property(e => e.PaymentDeadlineDay).HasColumnName("payment_deadline_day");
            entity.Property(e => e.PaymentMethodAvailable)
                .IsRequired()
                .HasColumnType("ntext")
                .HasColumnName("payment_method_available");
            entity.Property(e => e.RefundPolicy)
                .IsRequired()
                .HasColumnType("ntext")
                .HasColumnName("refund_policy");
            entity.Property(e => e.UpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("update_date");
        });

        modelBuilder.Entity<Project>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Project__3213E83F5F218069");

            entity.ToTable("Project");

            entity.HasIndex(e => e.Id, "UQ__Project__3213E83E74A29066").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.ActualCost)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("actual_cost");
            entity.Property(e => e.ConstructionStaffId)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("construction_staff_id");
            entity.Property(e => e.CustomerId)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("customer_id");
            entity.Property(e => e.DesignerId)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("designer_id");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.EstimatedCost)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("estimated_cost");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("status");

            entity.HasOne(d => d.ConstructionStaff).WithMany(p => p.ProjectConstructionStaffs)
                .HasForeignKey(d => d.ConstructionStaffId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Project_ConstructionStaff");

            entity.HasOne(d => d.Customer).WithMany(p => p.Projects)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Project_Customer");

            entity.HasOne(d => d.Designer).WithMany(p => p.ProjectDesigners)
                .HasForeignKey(d => d.DesignerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Project_Designer");
        });

        modelBuilder.Entity<Quotation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Quotatio__3213E83F1633F151");

            entity.ToTable("Quotation");

            entity.HasIndex(e => e.Id, "UQ__Quotatio__3213E83E2FCF6222").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.ComplexityLevel)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ConsultationAmout)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Consultation_amout");
            entity.Property(e => e.DesignId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Design_id");
            entity.Property(e => e.Note).HasColumnType("ntext");
            entity.Property(e => e.QuotationAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.QuotationDate).HasColumnType("datetime");
            entity.Property(e => e.Scale)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Style)
                .HasMaxLength(1)
                .IsUnicode(false);

            entity.HasOne(d => d.Design).WithMany(p => p.Quotations)
                .HasForeignKey(d => d.DesignId)
                .HasConstraintName("FK_Quotation_Design");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__User__3213E83F527B534D");

            entity.ToTable("User");

            entity.HasIndex(e => e.Id, "UQ__User__3213E83E1E2538F4").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Address)
                .HasMaxLength(1)
                .HasColumnName("address");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.Fullname)
                .IsRequired()
                .HasMaxLength(1)
                .HasColumnName("fullname");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("password");
            entity.Property(e => e.Phone)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("role");
            entity.Property(e => e.Status)
                .HasDefaultValue(true)
                .HasColumnName("status");
            entity.Property(e => e.UpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("update_date");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("username");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}