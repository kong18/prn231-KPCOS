// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace KPCOS.Data.Models;

public partial class FA24_SE1717_PRN231_G4_KPCOSContext : DbContext
{
    public FA24_SE1717_PRN231_G4_KPCOSContext()
    {
    }

    public FA24_SE1717_PRN231_G4_KPCOSContext(DbContextOptions<FA24_SE1717_PRN231_G4_KPCOSContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Consultation> Consultations { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Design> Designs { get; set; }

    public virtual DbSet<DesignConcept> DesignConcepts { get; set; }

    public virtual DbSet<DesignTemplate> DesignTemplates { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<Feedback> Feedbacks { get; set; }

    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<Material> Materials { get; set; }

    public virtual DbSet<Package> Packages { get; set; }

    public virtual DbSet<PaymentPolicy> PaymentPolicies { get; set; }

    public virtual DbSet<Project> Projects { get; set; }

    public virtual DbSet<Quotation> Quotations { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"));

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Consultation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Consulta__3213E83F68827588");

            entity.ToTable("Consultation");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.AdjustedDesign)
                .HasColumnType("text")
                .HasColumnName("adjusted_design");
            entity.Property(e => e.AdjustedSpecification)
                .HasColumnType("text")
                .HasColumnName("adjusted_specification");
            entity.Property(e => e.DesignId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("design_id");
            entity.Property(e => e.Note)
                .HasColumnType("text")
                .HasColumnName("note");

            entity.HasOne(d => d.Design).WithMany(p => p.Consultations)
                .HasForeignKey(d => d.DesignId)
                .HasConstraintName("FK__Consultat__desig__6477ECF3");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Customer__3213E83FB15428AB");

            entity.ToTable("Customer");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.LoyaltyPoint).HasColumnName("loyalty_point");
            entity.Property(e => e.MembershipStatus)
                .HasMaxLength(50)
                .HasColumnName("membership_status");
            entity.Property(e => e.PackageId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("package_id");
            entity.Property(e => e.UserId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("user_id");

            entity.HasOne(d => d.Package).WithMany(p => p.Customers)
                .HasForeignKey(d => d.PackageId)
                .HasConstraintName("FK__Customer__packag__59063A47");

            entity.HasOne(d => d.User).WithMany(p => p.Customers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Customer__user_i__59FA5E80");
        });

        modelBuilder.Entity<Design>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Design__3213E83F140225D2");

            entity.ToTable("Design");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Budget)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("budget");
            entity.Property(e => e.ConsultantBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("consultant_by");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.CustomerId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("customer_id");
            entity.Property(e => e.Depth)
                .HasDefaultValue(0.6m)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("depth");
            entity.Property(e => e.DesignType)
                .HasMaxLength(50)
                .HasColumnName("design_type");
            entity.Property(e => e.FiltrationSystem)
                .HasMaxLength(50)
                .HasColumnName("filtration_system");
            entity.Property(e => e.KoiCountRange)
                .HasMaxLength(50)
                .HasColumnName("koi_count_range");
            entity.Property(e => e.KoiType)
                .HasMaxLength(50)
                .HasColumnName("koi_type");
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .HasDefaultValue("Outdoor")
                .HasColumnName("location");
            entity.Property(e => e.MinLength)
                .HasDefaultValue(2m)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("min_length");
            entity.Property(e => e.MinWidth)
                .HasDefaultValue(0.8m)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("min_width");
            entity.Property(e => e.Note)
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.Shape)
                .HasMaxLength(50)
                .HasDefaultValue("Rectangular")
                .HasColumnName("shape");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Not yet responded")
                .HasColumnName("status");
            entity.Property(e => e.TemplateId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("template_id");
            entity.Property(e => e.UpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("update_date");
            entity.Property(e => e.WaterLevel)
                .HasDefaultValue(0.4m)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("water_level");
            entity.Property(e => e.WaterQuality)
                .HasMaxLength(50)
                .HasColumnName("water_quality");

            entity.HasOne(d => d.Customer).WithMany(p => p.Designs)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Design__customer__619B8048");

            entity.HasOne(d => d.Template).WithMany(p => p.Designs)
                .HasForeignKey(d => d.TemplateId)
                .HasConstraintName("FK__Design__template__628FA481");
        });

        modelBuilder.Entity<DesignConcept>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DesignCo__3213E83F75DBB039");

            entity.ToTable("DesignConcept");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.Image)
                .HasMaxLength(255)
                .HasColumnName("image");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.ProjectId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("project_id");

            entity.HasOne(d => d.Project).WithMany(p => p.DesignConcepts)
                .HasForeignKey(d => d.ProjectId)
                .HasConstraintName("FK__DesignCon__proje__6383C8BA");
        });

        modelBuilder.Entity<DesignTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DesignTe__3213E83F1887EC18");

            entity.ToTable("DesignTemplate");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.DefaultLocation)
                .HasMaxLength(100)
                .HasColumnName("default_location");
            entity.Property(e => e.DefaultShape)
                .HasMaxLength(50)
                .HasColumnName("default_shape");
            entity.Property(e => e.DefaultSize)
                .HasMaxLength(50)
                .HasColumnName("default_size");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Image)
                .HasMaxLength(255)
                .HasColumnName("image");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.TotalPrice)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("total_price");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Employee__3213E83F63D299BA");

            entity.ToTable("Employee");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Salary)
                .HasDefaultValue(1000m)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("salary");
            entity.Property(e => e.SupervisorId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("supervisor_id");
            entity.Property(e => e.UserId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("user_id");

            entity.HasOne(d => d.Supervisor).WithMany(p => p.InverseSupervisor)
                .HasForeignKey(d => d.SupervisorId)
                .HasConstraintName("FK__Employee__superv__5AEE82B9");

            entity.HasOne(d => d.User).WithMany(p => p.Employees)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Employee__user_i__5BE2A6F2");
        });

        modelBuilder.Entity<Feedback>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Feedback__3213E83F51C89352");

            entity.ToTable("Feedback");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Content)
                .HasColumnType("text")
                .HasColumnName("content");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.CustomerId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("customer_id");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.ProjectId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("project_id");
            entity.Property(e => e.Rating)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("rating");
            entity.Property(e => e.UpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("update_date");

            entity.HasOne(d => d.Customer).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Feedback__custom__656C112C");

            entity.HasOne(d => d.Project).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.ProjectId)
                .HasConstraintName("FK__Feedback__projec__66603565");
        });

        modelBuilder.Entity<Invoice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Invoice__3213E83FBAF9B7EF");

            entity.ToTable("Invoice");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.DiscountApplied)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("discount_applied");
            entity.Property(e => e.PaymentDate)
                .HasColumnType("datetime")
                .HasColumnName("payment_date");
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(50)
                .HasColumnName("payment_method");
            entity.Property(e => e.ProjectId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("project_id");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("status");
            entity.Property(e => e.TaxAmount)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("tax_amount");
            entity.Property(e => e.TotalAmount)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("total_amount");

            entity.HasOne(d => d.Project).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.ProjectId)
                .HasConstraintName("FK__Invoice__project__60A75C0F");
        });

        modelBuilder.Entity<Material>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Material__3213E83F70B73354");

            entity.ToTable("Material");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.ProjectId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("project_id");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .HasColumnName("type");
            entity.Property(e => e.Unit)
                .HasMaxLength(50)
                .HasColumnName("unit");

            entity.HasOne(d => d.Project).WithMany(p => p.Materials)
                .HasForeignKey(d => d.ProjectId)
                .HasConstraintName("FK__Material__projec__5FB337D6");
        });

        modelBuilder.Entity<Package>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Package__3213E83FC1AD5376");

            entity.ToTable("Package");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.DiscountPercentage).HasColumnName("discount_percentage");
            entity.Property(e => e.Duration)
                .HasMaxLength(50)
                .HasColumnName("duration");
            entity.Property(e => e.FeatureInclude)
                .HasColumnType("text")
                .HasColumnName("feature_include");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("price");
            entity.Property(e => e.UpdateAt)
                .HasColumnType("datetime")
                .HasColumnName("update_at");
        });

        modelBuilder.Entity<PaymentPolicy>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PaymentP__3213E83FC77D1B05");

            entity.ToTable("PaymentPolicy");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.PaymentDeadlineDay).HasColumnName("payment_deadline_day");
            entity.Property(e => e.PaymentMethodAvailable)
                .HasColumnType("text")
                .HasColumnName("payment_method_available");
            entity.Property(e => e.RefundPolicy)
                .HasColumnType("text")
                .HasColumnName("refund_policy");
            entity.Property(e => e.UpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("update_date");
        });

        modelBuilder.Entity<Project>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Project__3213E83F0793F84C");

            entity.ToTable("Project");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.ActualCost)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("actual_cost");
            entity.Property(e => e.ConstructionStaffId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("construction_staff_id");
            entity.Property(e => e.CustomerId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("customer_id");
            entity.Property(e => e.DesignerId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("designer_id");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.EstimatedCost)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("estimated_cost");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("status");

            entity.HasOne(d => d.ConstructionStaff).WithMany(p => p.ProjectConstructionStaffs)
                .HasForeignKey(d => d.ConstructionStaffId)
                .HasConstraintName("FK__Project__constru__5CD6CB2B");

            entity.HasOne(d => d.Customer).WithMany(p => p.Projects)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Project__custome__5DCAEF64");

            entity.HasOne(d => d.Designer).WithMany(p => p.ProjectDesigners)
                .HasForeignKey(d => d.DesignerId)
                .HasConstraintName("FK__Project__designe__5EBF139D");
        });

        modelBuilder.Entity<Quotation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Quotatio__3213E83FCB1D02D1");

            entity.ToTable("Quotation");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.ComplexityLevel)
                .HasMaxLength(50)
                .HasColumnName("complexity_level");
            entity.Property(e => e.ConsultationAmount)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("consultation_amount");
            entity.Property(e => e.DesignId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("design_id");
            entity.Property(e => e.Note)
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.QuotationAmount)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("quotation_amount");
            entity.Property(e => e.QuotationDate)
                .HasColumnType("datetime")
                .HasColumnName("quotation_date");
            entity.Property(e => e.Scale)
                .HasMaxLength(50)
                .HasColumnName("scale");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.Style)
                .HasMaxLength(100)
                .HasColumnName("style");

            entity.HasOne(d => d.Design).WithMany(p => p.Quotations)
                .HasForeignKey(d => d.DesignId)
                .HasConstraintName("FK__Quotation__desig__6754599E");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__User__3213E83F96C06612");

            entity.ToTable("User");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasColumnName("address");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.Fullname)
                .HasMaxLength(100)
                .HasColumnName("fullname");
            entity.Property(e => e.Password)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("password");
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .HasColumnName("phone");
            entity.Property(e => e.Role)
                .HasMaxLength(50)
                .HasColumnName("role");
            entity.Property(e => e.Status)
                .HasDefaultValue(true)
                .HasColumnName("status");
            entity.Property(e => e.UpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("update_date");
            entity.Property(e => e.Username)
                .HasMaxLength(100)
                .HasColumnName("username");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}